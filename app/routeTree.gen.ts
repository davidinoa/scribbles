/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutNotesImport } from './routes/_layout/notes'
import { Route as LayoutArchiveImport } from './routes/_layout/archive'
import { Route as LayoutNotesIndexImport } from './routes/_layout/notes.index'
import { Route as LayoutNotesNoteIdImport } from './routes/_layout/notes_.$noteId'

// Create/Update Routes

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNotesRoute = LayoutNotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutArchiveRoute = LayoutArchiveImport.update({
  id: '/archive',
  path: '/archive',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNotesIndexRoute = LayoutNotesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutNotesRoute,
} as any)

const LayoutNotesNoteIdRoute = LayoutNotesNoteIdImport.update({
  id: '/notes_/$noteId',
  path: '/notes/$noteId',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/_layout/archive': {
      id: '/_layout/archive'
      path: '/archive'
      fullPath: '/archive'
      preLoaderRoute: typeof LayoutArchiveImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/notes': {
      id: '/_layout/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof LayoutNotesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/notes_/$noteId': {
      id: '/_layout/notes_/$noteId'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof LayoutNotesNoteIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/notes/': {
      id: '/_layout/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof LayoutNotesIndexImport
      parentRoute: typeof LayoutNotesImport
    }
  }
}

// Create and export the route tree

interface LayoutNotesRouteChildren {
  LayoutNotesIndexRoute: typeof LayoutNotesIndexRoute
}

const LayoutNotesRouteChildren: LayoutNotesRouteChildren = {
  LayoutNotesIndexRoute: LayoutNotesIndexRoute,
}

const LayoutNotesRouteWithChildren = LayoutNotesRoute._addFileChildren(
  LayoutNotesRouteChildren,
)

interface LayoutRouteChildren {
  LayoutArchiveRoute: typeof LayoutArchiveRoute
  LayoutNotesRoute: typeof LayoutNotesRouteWithChildren
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutNotesNoteIdRoute: typeof LayoutNotesNoteIdRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutArchiveRoute: LayoutArchiveRoute,
  LayoutNotesRoute: LayoutNotesRouteWithChildren,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutNotesNoteIdRoute: LayoutNotesNoteIdRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/archive': typeof LayoutArchiveRoute
  '/notes': typeof LayoutNotesRouteWithChildren
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/notes/$noteId': typeof LayoutNotesNoteIdRoute
  '/notes/': typeof LayoutNotesIndexRoute
}

export interface FileRoutesByTo {
  '/archive': typeof LayoutArchiveRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
  '/notes/$noteId': typeof LayoutNotesNoteIdRoute
  '/notes': typeof LayoutNotesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/_layout/archive': typeof LayoutArchiveRoute
  '/_layout/notes': typeof LayoutNotesRouteWithChildren
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/notes_/$noteId': typeof LayoutNotesNoteIdRoute
  '/_layout/notes/': typeof LayoutNotesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/archive'
    | '/notes'
    | '/settings'
    | '/'
    | '/notes/$noteId'
    | '/notes/'
  fileRoutesByTo: FileRoutesByTo
  to: '/archive' | '/settings' | '/' | '/notes/$noteId' | '/notes'
  id:
    | '__root__'
    | '/_layout'
    | '/_layout/archive'
    | '/_layout/notes'
    | '/_layout/settings'
    | '/_layout/'
    | '/_layout/notes_/$noteId'
    | '/_layout/notes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/archive",
        "/_layout/notes",
        "/_layout/settings",
        "/_layout/",
        "/_layout/notes_/$noteId"
      ]
    },
    "/_layout/archive": {
      "filePath": "_layout/archive.tsx",
      "parent": "/_layout"
    },
    "/_layout/notes": {
      "filePath": "_layout/notes.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/notes/"
      ]
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/notes_/$noteId": {
      "filePath": "_layout/notes_.$noteId.tsx",
      "parent": "/_layout"
    },
    "/_layout/notes/": {
      "filePath": "_layout/notes.index.tsx",
      "parent": "/_layout/notes"
    }
  }
}
ROUTE_MANIFEST_END */
