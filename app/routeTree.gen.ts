/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as SignInImport } from './routes/sign-in'
import { Route as PlaygroundImport } from './routes/playground'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as PlaygroundFontImport } from './routes/playground/font'
import { Route as PlaygroundAppearanceImport } from './routes/playground/appearance'
import { Route as LayoutTagsImport } from './routes/_layout/tags'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'
import { Route as LayoutNotesImport } from './routes/_layout/notes'
import { Route as LayoutArchiveImport } from './routes/_layout/archive'
import { Route as LayoutNotesIndexImport } from './routes/_layout/notes.index'
import { Route as LayoutTagsTagNameImport } from './routes/_layout/tags_.$tagName'
import { Route as LayoutSettingsFontImport } from './routes/_layout/settings_.font'
import { Route as LayoutSettingsAppearanceImport } from './routes/_layout/settings_.appearance'
import { Route as LayoutNotesNoteIdImport } from './routes/_layout/notes_.$noteId'

// Create/Update Routes

const SignInRoute = SignInImport.update({
  id: '/sign-in',
  path: '/sign-in',
  getParentRoute: () => rootRoute,
} as any)

const PlaygroundRoute = PlaygroundImport.update({
  id: '/playground',
  path: '/playground',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const PlaygroundFontRoute = PlaygroundFontImport.update({
  id: '/font',
  path: '/font',
  getParentRoute: () => PlaygroundRoute,
} as any)

const PlaygroundAppearanceRoute = PlaygroundAppearanceImport.update({
  id: '/appearance',
  path: '/appearance',
  getParentRoute: () => PlaygroundRoute,
} as any)

const LayoutTagsRoute = LayoutTagsImport.update({
  id: '/tags',
  path: '/tags',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNotesRoute = LayoutNotesImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutArchiveRoute = LayoutArchiveImport.update({
  id: '/archive',
  path: '/archive',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNotesIndexRoute = LayoutNotesIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutNotesRoute,
} as any)

const LayoutTagsTagNameRoute = LayoutTagsTagNameImport.update({
  id: '/tags_/$tagName',
  path: '/tags/$tagName',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsFontRoute = LayoutSettingsFontImport.update({
  id: '/settings_/font',
  path: '/settings/font',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsAppearanceRoute = LayoutSettingsAppearanceImport.update({
  id: '/settings_/appearance',
  path: '/settings/appearance',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutNotesNoteIdRoute = LayoutNotesNoteIdImport.update({
  id: '/notes_/$noteId',
  path: '/notes/$noteId',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/playground': {
      id: '/playground'
      path: '/playground'
      fullPath: '/playground'
      preLoaderRoute: typeof PlaygroundImport
      parentRoute: typeof rootRoute
    }
    '/sign-in': {
      id: '/sign-in'
      path: '/sign-in'
      fullPath: '/sign-in'
      preLoaderRoute: typeof SignInImport
      parentRoute: typeof rootRoute
    }
    '/_layout/archive': {
      id: '/_layout/archive'
      path: '/archive'
      fullPath: '/archive'
      preLoaderRoute: typeof LayoutArchiveImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/notes': {
      id: '/_layout/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof LayoutNotesImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/tags': {
      id: '/_layout/tags'
      path: '/tags'
      fullPath: '/tags'
      preLoaderRoute: typeof LayoutTagsImport
      parentRoute: typeof LayoutImport
    }
    '/playground/appearance': {
      id: '/playground/appearance'
      path: '/appearance'
      fullPath: '/playground/appearance'
      preLoaderRoute: typeof PlaygroundAppearanceImport
      parentRoute: typeof PlaygroundImport
    }
    '/playground/font': {
      id: '/playground/font'
      path: '/font'
      fullPath: '/playground/font'
      preLoaderRoute: typeof PlaygroundFontImport
      parentRoute: typeof PlaygroundImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/notes_/$noteId': {
      id: '/_layout/notes_/$noteId'
      path: '/notes/$noteId'
      fullPath: '/notes/$noteId'
      preLoaderRoute: typeof LayoutNotesNoteIdImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings_/appearance': {
      id: '/_layout/settings_/appearance'
      path: '/settings/appearance'
      fullPath: '/settings/appearance'
      preLoaderRoute: typeof LayoutSettingsAppearanceImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/settings_/font': {
      id: '/_layout/settings_/font'
      path: '/settings/font'
      fullPath: '/settings/font'
      preLoaderRoute: typeof LayoutSettingsFontImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/tags_/$tagName': {
      id: '/_layout/tags_/$tagName'
      path: '/tags/$tagName'
      fullPath: '/tags/$tagName'
      preLoaderRoute: typeof LayoutTagsTagNameImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/notes/': {
      id: '/_layout/notes/'
      path: '/'
      fullPath: '/notes/'
      preLoaderRoute: typeof LayoutNotesIndexImport
      parentRoute: typeof LayoutNotesImport
    }
  }
}

// Create and export the route tree

interface LayoutNotesRouteChildren {
  LayoutNotesIndexRoute: typeof LayoutNotesIndexRoute
}

const LayoutNotesRouteChildren: LayoutNotesRouteChildren = {
  LayoutNotesIndexRoute: LayoutNotesIndexRoute,
}

const LayoutNotesRouteWithChildren = LayoutNotesRoute._addFileChildren(
  LayoutNotesRouteChildren,
)

interface LayoutRouteChildren {
  LayoutArchiveRoute: typeof LayoutArchiveRoute
  LayoutNotesRoute: typeof LayoutNotesRouteWithChildren
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutTagsRoute: typeof LayoutTagsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
  LayoutNotesNoteIdRoute: typeof LayoutNotesNoteIdRoute
  LayoutSettingsAppearanceRoute: typeof LayoutSettingsAppearanceRoute
  LayoutSettingsFontRoute: typeof LayoutSettingsFontRoute
  LayoutTagsTagNameRoute: typeof LayoutTagsTagNameRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutArchiveRoute: LayoutArchiveRoute,
  LayoutNotesRoute: LayoutNotesRouteWithChildren,
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutTagsRoute: LayoutTagsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
  LayoutNotesNoteIdRoute: LayoutNotesNoteIdRoute,
  LayoutSettingsAppearanceRoute: LayoutSettingsAppearanceRoute,
  LayoutSettingsFontRoute: LayoutSettingsFontRoute,
  LayoutTagsTagNameRoute: LayoutTagsTagNameRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

interface PlaygroundRouteChildren {
  PlaygroundAppearanceRoute: typeof PlaygroundAppearanceRoute
  PlaygroundFontRoute: typeof PlaygroundFontRoute
}

const PlaygroundRouteChildren: PlaygroundRouteChildren = {
  PlaygroundAppearanceRoute: PlaygroundAppearanceRoute,
  PlaygroundFontRoute: PlaygroundFontRoute,
}

const PlaygroundRouteWithChildren = PlaygroundRoute._addFileChildren(
  PlaygroundRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/playground': typeof PlaygroundRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/archive': typeof LayoutArchiveRoute
  '/notes': typeof LayoutNotesRouteWithChildren
  '/settings': typeof LayoutSettingsRoute
  '/tags': typeof LayoutTagsRoute
  '/playground/appearance': typeof PlaygroundAppearanceRoute
  '/playground/font': typeof PlaygroundFontRoute
  '/': typeof LayoutIndexRoute
  '/notes/$noteId': typeof LayoutNotesNoteIdRoute
  '/settings/appearance': typeof LayoutSettingsAppearanceRoute
  '/settings/font': typeof LayoutSettingsFontRoute
  '/tags/$tagName': typeof LayoutTagsTagNameRoute
  '/notes/': typeof LayoutNotesIndexRoute
}

export interface FileRoutesByTo {
  '/playground': typeof PlaygroundRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/archive': typeof LayoutArchiveRoute
  '/settings': typeof LayoutSettingsRoute
  '/tags': typeof LayoutTagsRoute
  '/playground/appearance': typeof PlaygroundAppearanceRoute
  '/playground/font': typeof PlaygroundFontRoute
  '/': typeof LayoutIndexRoute
  '/notes/$noteId': typeof LayoutNotesNoteIdRoute
  '/settings/appearance': typeof LayoutSettingsAppearanceRoute
  '/settings/font': typeof LayoutSettingsFontRoute
  '/tags/$tagName': typeof LayoutTagsTagNameRoute
  '/notes': typeof LayoutNotesIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/playground': typeof PlaygroundRouteWithChildren
  '/sign-in': typeof SignInRoute
  '/_layout/archive': typeof LayoutArchiveRoute
  '/_layout/notes': typeof LayoutNotesRouteWithChildren
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/tags': typeof LayoutTagsRoute
  '/playground/appearance': typeof PlaygroundAppearanceRoute
  '/playground/font': typeof PlaygroundFontRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_layout/notes_/$noteId': typeof LayoutNotesNoteIdRoute
  '/_layout/settings_/appearance': typeof LayoutSettingsAppearanceRoute
  '/_layout/settings_/font': typeof LayoutSettingsFontRoute
  '/_layout/tags_/$tagName': typeof LayoutTagsTagNameRoute
  '/_layout/notes/': typeof LayoutNotesIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/playground'
    | '/sign-in'
    | '/archive'
    | '/notes'
    | '/settings'
    | '/tags'
    | '/playground/appearance'
    | '/playground/font'
    | '/'
    | '/notes/$noteId'
    | '/settings/appearance'
    | '/settings/font'
    | '/tags/$tagName'
    | '/notes/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/playground'
    | '/sign-in'
    | '/archive'
    | '/settings'
    | '/tags'
    | '/playground/appearance'
    | '/playground/font'
    | '/'
    | '/notes/$noteId'
    | '/settings/appearance'
    | '/settings/font'
    | '/tags/$tagName'
    | '/notes'
  id:
    | '__root__'
    | '/_layout'
    | '/playground'
    | '/sign-in'
    | '/_layout/archive'
    | '/_layout/notes'
    | '/_layout/settings'
    | '/_layout/tags'
    | '/playground/appearance'
    | '/playground/font'
    | '/_layout/'
    | '/_layout/notes_/$noteId'
    | '/_layout/settings_/appearance'
    | '/_layout/settings_/font'
    | '/_layout/tags_/$tagName'
    | '/_layout/notes/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  PlaygroundRoute: typeof PlaygroundRouteWithChildren
  SignInRoute: typeof SignInRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  PlaygroundRoute: PlaygroundRouteWithChildren,
  SignInRoute: SignInRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/playground",
        "/sign-in"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/archive",
        "/_layout/notes",
        "/_layout/settings",
        "/_layout/tags",
        "/_layout/",
        "/_layout/notes_/$noteId",
        "/_layout/settings_/appearance",
        "/_layout/settings_/font",
        "/_layout/tags_/$tagName"
      ]
    },
    "/playground": {
      "filePath": "playground.tsx",
      "children": [
        "/playground/appearance",
        "/playground/font"
      ]
    },
    "/sign-in": {
      "filePath": "sign-in.tsx"
    },
    "/_layout/archive": {
      "filePath": "_layout/archive.tsx",
      "parent": "/_layout"
    },
    "/_layout/notes": {
      "filePath": "_layout/notes.tsx",
      "parent": "/_layout",
      "children": [
        "/_layout/notes/"
      ]
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/tags": {
      "filePath": "_layout/tags.tsx",
      "parent": "/_layout"
    },
    "/playground/appearance": {
      "filePath": "playground/appearance.tsx",
      "parent": "/playground"
    },
    "/playground/font": {
      "filePath": "playground/font.tsx",
      "parent": "/playground"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    },
    "/_layout/notes_/$noteId": {
      "filePath": "_layout/notes_.$noteId.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings_/appearance": {
      "filePath": "_layout/settings_.appearance.tsx",
      "parent": "/_layout"
    },
    "/_layout/settings_/font": {
      "filePath": "_layout/settings_.font.tsx",
      "parent": "/_layout"
    },
    "/_layout/tags_/$tagName": {
      "filePath": "_layout/tags_.$tagName.tsx",
      "parent": "/_layout"
    },
    "/_layout/notes/": {
      "filePath": "_layout/notes.index.tsx",
      "parent": "/_layout/notes"
    }
  }
}
ROUTE_MANIFEST_END */
